using System.Collections.Generic;

namespace Nop.Plugin.Payments.Paybyrd;

/// <summary>
/// Represents plugin constants
/// </summary>
public class PaybyrdPaymentDefaults
{
    /// <summary>
    /// Gets the Paybyrd API's base path
    /// </summary>
    public static string PaybyrdAPIBasePath => "https://gateway.paybyrd.com/api/v2";

    /// <summary>
    /// Gets the Paybyrd webhook base path
    /// </summary>
    public static string PaybyrdAPIWebhookBasePath => "https://webhook.paybyrd.com/api/v1";

    /// <summary>
    /// Gets the Paybyrd hosted form base path for payments
    /// </summary>
    public static string PaybyrdHostedFormBasePath => "https://checkout.paybyrd.com/#/payment";

    /// <summary>
    /// Gets the configuration route name
    /// </summary>
    public static string ConfigurationRouteName => "Plugin.Payments.Paybyrd.Configure";

    /// <summary>
    /// Gets the webhook route name
    /// </summary>
    public static string WebhookRouteName => "Plugin.Payments.Paybyrd.Webhook";

    /// <summary>
    /// Gets the order data from paybyrd based on the order id generated by the checkout and then redirects the user to the hosted form page for payment
    /// </summary>
    public static string HandleOrderPostProcessingRouteName => "Plugin.Payments.Paybyrd.HandleOrderPostProcessing";

    /// <summary>
    /// Gets the hosted form response either with a success payment either with a failed one and change the order status based on that
    /// </summary>
    public static string ValidatePaymentRouteName => "Plugin.Payments.Paybyrd.ValidatePayment";

    /// <summary>
    /// Gets a default period (in seconds) before the request times out
    /// </summary>
    public static int RequestTimeout => 10;

    /// <summary>
    /// Gets webhook event names to subscribe
    /// </summary>
    public static List<string> WebhookEventNames => new List<string>
    {
        "order.created",
        "order.pending",
        "order.paid",
        "order.refunded",
        "order.canceled",
        "order.expired",
        "order.temporaryfailed"
    };
}